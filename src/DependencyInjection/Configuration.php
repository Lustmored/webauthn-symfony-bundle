<?php

declare(strict_types=1);

/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2014-2019 Spomky-Labs
 *
 * This software may be modified and distributed under the terms
 * of the MIT license.  See the LICENSE file for details.
 */

namespace Webauthn\Bundle\DependencyInjection;

use Cose\Algorithms;
use Symfony\Component\Config\Definition\Builder\ArrayNodeDefinition;
use Symfony\Component\Config\Definition\Builder\TreeBuilder;
use Symfony\Component\Config\Definition\ConfigurationInterface;
use Webauthn\AuthenticatorSelectionCriteria;
use Webauthn\Bundle\Repository\PublicKeyCredentialUserEntityRepository;
use Webauthn\ConformanceToolset\Controller\AttestationRequestController;
use Webauthn\PublicKeyCredentialCreationOptions;
use Webauthn\PublicKeyCredentialSourceRepository;
use Webauthn\TokenBinding\TokenBindingNotSupportedHandler;

final class Configuration implements ConfigurationInterface
{
    /**
     * @var string
     */
    private $alias;

    public function __construct(string $alias)
    {
        $this->alias = $alias;
    }

    /**
     * {@inheritdoc}
     */
    public function getConfigTreeBuilder()
    {
        $treeBuilder = new TreeBuilder($this->alias);
        /** @var ArrayNodeDefinition $rootNode */
        $rootNode = $treeBuilder->getRootNode();

        $rootNode
            ->addDefaultsIfNotSet()
            ->children()
                ->scalarNode('credential_repository')
                    ->isRequired()
                    ->info('This repository is responsible of the credential storage')
                ->end()
                ->scalarNode('user_repository')
                    ->isRequired()
                    ->info('This repository is responsible of the user storage. It is mandatory when using the transport binding profile feature')
                ->end()
                ->scalarNode('token_binding_support_handler')
                    ->defaultValue(TokenBindingNotSupportedHandler::class)
                    ->cannotBeEmpty()
                    ->info('This handler will check the token binding header from the request')
                ->end()
                ->arrayNode('android_safetynet')
                    ->addDefaultsIfNotSet()
                    ->children()
                        ->booleanNode('enabled')
                            ->defaultTrue()
                            ->setDeprecated('Android SafetyNet support is now always available')
                        ->end()
                        ->scalarNode('http_client')
                            ->defaultValue('webauthn.android_safetynet.default_http_client')
                            ->info('PSR18 Client')
                        ->end()
                        ->integerNode('leeway')
                            ->defaultValue(2000)
                            ->min(0)
                            ->info('Leeway for timestamp verification in response (in millisecond). At least 2000 msec are recommended.')
                        ->end()
                        ->integerNode('max_age')
                            ->min(0)
                            ->defaultValue(60000)
                            ->info('Maximum age of the response (in millisecond)')
                        ->end()
                        ->scalarNode('api_key')
                            ->defaultNull()
                            ->info('If set, the application will verify the statements using Google API. See https://console.developers.google.com/apis/library to get it.')
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('metadata_service')
                    ->canBeEnabled()
                    ->children()
                        ->scalarNode('repository')
                            ->defaultValue('webauthn.metadata_service.default_repository')
                            ->info('Metadata Statement repository')
                        ->end()
                        ->scalarNode('http_client')
                            ->defaultValue('webauthn.metadata_service.default_http_client')
                            ->info('PSR18 HTTP Client')
                        ->end()
                        ->scalarNode('request_factory')
                            ->isRequired()
                            ->info('PSR-7 Request factory service')
                        ->end()
                        ->arrayNode('services')
                            ->treatFalseLike([])
                            ->treatNullLike([])
                            ->useAttributeAsKey('name')
                            ->arrayPrototype()
                                ->addDefaultsIfNotSet()
                                ->children()
                                    ->booleanNode('is_public')
                                        ->defaultFalse()
                                        ->info('If true, the service will be public')
                                    ->end()
                                    ->scalarNode('uri')
                                        ->isRequired()
                                        ->info('Metadata service URI (e.g. https://mds2.fidoalliance.org)')
                                    ->end()
                                    ->arrayNode('additional_query_string_values')
                                        ->info('Additional query string key/value pairs (e.g. access token)')
                                        ->treatFalseLike([])
                                        ->treatTrueLike([])
                                        ->treatNullLike([])
                                        ->useAttributeAsKey('name')
                                        ->variablePrototype()->end()
                                    ->end()
                                    ->arrayNode('additional_headers')
                                        ->info('Additional header parameters (e.g. authorization)')
                                        ->treatFalseLike([])
                                        ->treatTrueLike([])
                                        ->treatNullLike([])
                                        ->useAttributeAsKey('name')
                                        ->variablePrototype()->end()
                                    ->end()
                                    ->scalarNode('http_client')
                                       ->defaultNull()
                                        ->info('If set, this client will override the one defined in the "metadata_service" section')
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('distant_single_statements')
                            ->treatFalseLike([])
                            ->treatNullLike([])
                            ->useAttributeAsKey('name')
                            ->arrayPrototype()
                                ->addDefaultsIfNotSet()
                                ->children()
                                    ->booleanNode('is_public')
                                        ->defaultFalse()
                                        ->info('If true, the service will be public')
                                    ->end()
                                    ->booleanNode('is_base_64')
                                        ->defaultFalse()
                                        ->info('If the metadata statement is encoded in base 64, set true')
                                    ->end()
                                    ->scalarNode('uri')
                                        ->isRequired()
                                        ->info('Metadata URI (e.g. https://raw.githubusercontent.com/solokeys/solo/2.1.0/metadata/Solo-FIDO2-CTAP2-Authenticator.json)')
                                    ->end()
                                    ->scalarNode('http_client')
                                        ->defaultNull()
                                        ->info('If set, this client will override the one defined in the "metadata_service" section')
                                    ->end()
                                    ->arrayNode('additional_headers')
                                        ->info('Additional header parameters (e.g. authorization)')
                                        ->treatFalseLike([])
                                        ->treatTrueLike([])
                                        ->treatNullLike([])
                                        ->useAttributeAsKey('name')
                                        ->variablePrototype()->end()
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                        ->arrayNode('from_data')
                            ->treatFalseLike([])
                            ->treatNullLike([])
                            ->useAttributeAsKey('name')
                            ->arrayPrototype()
                                ->addDefaultsIfNotSet()
                                ->children()
                                    ->booleanNode('is_public')
                                        ->defaultFalse()
                                        ->info('If true, the service will be public')
                                    ->end()
                                    ->booleanNode('is_base_64')
                                        ->defaultFalse()
                                        ->info('If the metadata statement is encoded in base 64, set true')
                                    ->end()
                                    ->scalarNode('data')
                                        ->isRequired()
                                        ->info('Metadata data')
                                    ->end()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('creation_profiles')
                    ->treatFalseLike([])
                    ->treatNullLike([])
                    ->useAttributeAsKey('name')
                    ->arrayPrototype()
                        ->addDefaultsIfNotSet()
                        ->children()
                            ->arrayNode('rp')
                                ->isRequired()
                                ->children()
                                    ->scalarNode('id')->defaultNull()->end()
                                    ->scalarNode('name')->isRequired()->end()
                                    ->scalarNode('icon')->defaultNull()->end()
                                ->end()
                            ->end()
                            ->integerNode('challenge_length')
                                ->min(16)
                                ->defaultValue(32)
                            ->end()
                            ->integerNode('timeout')
                                ->min(0)
                                ->defaultValue(60000)
                            ->end()
                            ->arrayNode('authenticator_selection_criteria')
                                ->addDefaultsIfNotSet()
                                ->children()
                                    ->scalarNode('attachment_mode')->defaultValue(AuthenticatorSelectionCriteria::AUTHENTICATOR_ATTACHMENT_NO_PREFERENCE)->end()
                                    ->booleanNode('require_resident_key')->defaultFalse()->end()
                                    ->scalarNode('user_verification')->defaultValue(AuthenticatorSelectionCriteria::USER_VERIFICATION_REQUIREMENT_PREFERRED)->end()
                                ->end()
                            ->end()
                            ->arrayNode('extensions')
                                ->treatFalseLike([])
                                ->treatTrueLike([])
                                ->treatNullLike([])
                                ->useAttributeAsKey('name')
                                ->scalarPrototype()->end()
                            ->end()
                            ->arrayNode('public_key_credential_parameters')
                                ->integerPrototype()->end()
                                ->requiresAtLeastOneElement()
                                ->treatNullLike([])
                                ->treatFalseLike([])
                                ->treatTrueLike([])
                                ->defaultValue([
                                    Algorithms::COSE_ALGORITHM_EdDSA,
                                    Algorithms::COSE_ALGORITHM_ES256,
                                    Algorithms::COSE_ALGORITHM_ES256K,
                                    Algorithms::COSE_ALGORITHM_ES384,
                                    Algorithms::COSE_ALGORITHM_ES512,
                                    Algorithms::COSE_ALGORITHM_RS256,
                                    Algorithms::COSE_ALGORITHM_RS384,
                                    Algorithms::COSE_ALGORITHM_RS512,
                                    Algorithms::COSE_ALGORITHM_PS256,
                                    Algorithms::COSE_ALGORITHM_PS384,
                                    Algorithms::COSE_ALGORITHM_PS512,
                                ])
                            ->end()
                            ->scalarNode('attestation_conveyance')
                                ->defaultValue(PublicKeyCredentialCreationOptions::ATTESTATION_CONVEYANCE_PREFERENCE_NONE)
                            ->end()
                        ->end()
                    ->end()
                ->end()
                ->arrayNode('request_profiles')
                    ->treatFalseLike([])
                    ->treatNullLike([])
                    ->useAttributeAsKey('name')
                    ->arrayPrototype()
                        ->addDefaultsIfNotSet()
                        ->children()
                            ->scalarNode('rp_id')->defaultNull()->end()
                            ->integerNode('challenge_length')
                                ->min(16)
                                ->defaultValue(32)
                            ->end()
                            ->integerNode('timeout')
                                ->min(0)
                                ->defaultValue(60000)
                            ->end()
                            ->scalarNode('user_verification')->defaultValue(AuthenticatorSelectionCriteria::USER_VERIFICATION_REQUIREMENT_PREFERRED)->end()
                            ->arrayNode('extensions')
                                ->treatFalseLike([])
                                ->treatTrueLike([])
                                ->treatNullLike([])
                                ->useAttributeAsKey('name')
                                ->scalarPrototype()->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
            ->end();

        if (class_exists(AttestationRequestController::class)) {
            $this->appendTokenTransportBinding($rootNode);
        }

        return $treeBuilder;
    }

    private function appendTokenTransportBinding(ArrayNodeDefinition $node): void
    {
        $node->children()
            ->arrayNode('transport_binding_profile')
                ->treatFalseLike([])
                ->treatNullLike([])
                ->addDefaultsIfNotSet()
                ->children()
                    ->arrayNode('creation')
                        ->treatFalseLike([])
                        ->treatNullLike([])
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->scalarNode('profile_name')
                                    ->info('The name of the profile. Should be one of the creation profiles registered at path "webauthn.creation_profiles"')
                                    ->isRequired()
                                ->end()
                                ->scalarNode('user_entity_repository')
                                    ->info('User entity repository')
                                    ->defaultValue(PublicKeyCredentialUserEntityRepository::class)
                                ->end()
                                ->scalarNode('credential_source_repository')
                                    ->info('Public key credential source  repository')
                                    ->defaultValue(PublicKeyCredentialSourceRepository::class)
                                ->end()
                                ->scalarNode('request_path')
                                    ->info('The path of the creation request')
                                    ->isRequired()
                                ->end()
                                ->scalarNode('response_path')
                                    ->info('The path of the creation response')
                                    ->isRequired()
                                ->end()
                                ->scalarNode('session_parameter_name')
                                    ->info('The session name parameter')
                                    ->isRequired()
                                ->end()
                                ->scalarNode('host')
                                    ->info('The hostname')
                                    ->defaultNull()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                    ->arrayNode('request')
                        ->treatFalseLike([])
                        ->treatNullLike([])
                        ->useAttributeAsKey('name')
                        ->arrayPrototype()
                            ->addDefaultsIfNotSet()
                            ->children()
                                ->scalarNode('profile_name')
                                    ->info('The name of the profile. Should be one of the creation profiles registered at path "webauthn.creation_profiles"')
                                    ->isRequired()
                                ->end()
                                ->scalarNode('user_entity_repository')
                                    ->info('User entity repository')
                                    ->defaultValue(PublicKeyCredentialUserEntityRepository::class)
                                ->end()
                                ->scalarNode('credential_source_repository')
                                    ->info('Public key credential source  repository')
                                    ->defaultValue(PublicKeyCredentialSourceRepository::class)
                                ->end()
                                ->scalarNode('request_path')
                                    ->info('The path of the creation request')
                                    ->isRequired()
                                ->end()
                                ->scalarNode('response_path')
                                    ->info('The path of the creation response')
                                    ->isRequired()
                                ->end()
                                ->scalarNode('session_parameter_name')
                                    ->info('The session name parameter')
                                    ->isRequired()
                                ->end()
                                ->scalarNode('host')
                                    ->info('The hostname')
                                    ->defaultNull()
                                ->end()
                            ->end()
                        ->end()
                    ->end()
                ->end()
            ->end()
        ->end();
    }
}
